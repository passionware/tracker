

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE SCHEMA IF NOT EXISTS "public";


ALTER SCHEMA "public" OWNER TO "pg_database_owner";


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE TYPE "public"."currency" AS ENUM (
    'eur',
    'usd',
    'pln'
);


ALTER TYPE "public"."currency" OWNER TO "postgres";


CREATE TYPE "public"."link_type" AS ENUM (
    'reconcile',
    'clarify'
);


ALTER TYPE "public"."link_type" OWNER TO "postgres";


CREATE TYPE "public"."project_status" AS ENUM (
    'draft',
    'active',
    'closed'
);


ALTER TYPE "public"."project_status" OWNER TO "postgres";


CREATE TYPE "public"."variable_type" AS ENUM (
    'const',
    'expression'
);


ALTER TYPE "public"."variable_type" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."custom_query"("query" "text") RETURNS SETOF "record"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  RETURN QUERY EXECUTE query;
END;
$$;


ALTER FUNCTION "public"."custom_query"("query" "text") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_visible_clients"() RETURNS bigint[]
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE
    visible_client_ids BIGINT[];
BEGIN
    SELECT ARRAY(
        SELECT DISTINCT client_id
        FROM link_workspace_client lwc
        JOIN link_workspace_user lwu ON lwc.workspace_id = lwu.workspace_id
        WHERE lwu.user_id = auth.uid()
    ) INTO visible_client_ids;

    RETURN visible_client_ids;
END;
$$;


ALTER FUNCTION "public"."get_visible_clients"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_visible_workspaces"() RETURNS bigint[]
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE
    visible_workspace_ids BIGINT[];
BEGIN
    SELECT ARRAY(
        SELECT workspace_id
        FROM link_workspace_user
        WHERE user_id = auth.uid()
    ) INTO visible_workspace_ids;

    RETURN visible_workspace_ids;
END;
$$;


ALTER FUNCTION "public"."get_visible_workspaces"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."set_defined_updated_by"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    -- Ustawienie defined_by tylko przy wstawianiu
    IF TG_OP = 'INSERT' THEN
        NEW.defined_by = auth.uid();
    END IF;

    -- Ustawienie updated_by zawsze przy modyfikacji
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        NEW.updated_by = auth.uid();
    END IF;

    RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."set_defined_updated_by"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."billing" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "currency" "public"."currency" NOT NULL,
    "total_net" double precision NOT NULL,
    "total_gross" double precision NOT NULL,
    "client_id" bigint NOT NULL,
    "invoice_number" "text" NOT NULL,
    "invoice_date" "date" NOT NULL,
    "description" "text",
    "workspace_id" bigint NOT NULL
);


ALTER TABLE "public"."billing" OWNER TO "postgres";


COMMENT ON COLUMN "public"."billing"."workspace_id" IS 'who is invoicing the client';



CREATE OR REPLACE VIEW "public"."billing_with_details" AS
SELECT
    NULL::bigint AS "id",
    NULL::timestamp with time zone AS "created_at",
    NULL::"public"."currency" AS "currency",
    NULL::double precision AS "total_net",
    NULL::double precision AS "total_gross",
    NULL::bigint AS "client_id",
    NULL::"text" AS "invoice_number",
    NULL::"date" AS "invoice_date",
    NULL::"text" AS "description",
    NULL::bigint AS "workspace_id",
    NULL::"jsonb" AS "link_billing_reports",
    NULL::"jsonb" AS "contractors",
    NULL::bigint[] AS "linked_contractor_ids",
    NULL::"json" AS "client",
    NULL::numeric AS "total_report_value",
    NULL::numeric AS "total_billing_value",
    NULL::numeric AS "billing_balance",
    NULL::numeric AS "remaining_balance";


ALTER TABLE "public"."billing_with_details" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."client" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "avatar_url" "text"
);


ALTER TABLE "public"."client" OWNER TO "postgres";


ALTER TABLE "public"."billing" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."client_billing_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."client" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."client_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."contractor" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "full_name" "text",
    "user_id" "uuid"
);


ALTER TABLE "public"."contractor" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."report" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "contractor_id" bigint NOT NULL,
    "description" "text",
    "net_value" double precision NOT NULL,
    "period_start" "date" NOT NULL,
    "period_end" "date" NOT NULL,
    "currency" "public"."currency",
    "client_id" bigint,
    "workspace_id" bigint NOT NULL,
    "project_iteration_id" bigint
);


ALTER TABLE "public"."report" OWNER TO "postgres";


COMMENT ON TABLE "public"."report" IS 'information about every period contractor earnings (when, which client, which project, period, json calculation?)';



COMMENT ON COLUMN "public"."report"."net_value" IS 'net amount of money that we should renumerate the contractor';



COMMENT ON COLUMN "public"."report"."client_id" IS 'id klienta. w przyszłości chcemy linkować nie do klienta, tylko do konkretnego projektu';



COMMENT ON COLUMN "public"."report"."workspace_id" IS 'association to specific workspace. we need to understand which company (workspace) is about to charge the client. Real use case: awitzberg works for Atellio through Passionware Consulting spzoo, but Adam Borowski through own Passionware Adam Borowski';



ALTER TABLE "public"."report" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."contractor_earnings_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."link_contractor_project" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "contractor_id" bigint NOT NULL,
    "project_id" bigint NOT NULL,
    "description" "text",
    "default_role_id" bigint,
    "allowed_role_ids" "jsonb"
);


ALTER TABLE "public"."link_contractor_project" OWNER TO "postgres";


CREATE OR REPLACE VIEW "public"."contractor_with_projects" WITH ("security_invoker"='true') AS
 SELECT "contractor"."id",
    "contractor"."created_at",
    "contractor"."name",
    "contractor"."full_name",
    "contractor"."user_id",
    COALESCE(ARRAY( SELECT "link_contractor_project"."project_id"
           FROM "public"."link_contractor_project"
          WHERE ("link_contractor_project"."contractor_id" = "contractor"."id")), '{}'::bigint[]) AS "project_ids"
   FROM "public"."contractor";


ALTER TABLE "public"."contractor_with_projects" OWNER TO "postgres";


ALTER TABLE "public"."contractor" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."contractors_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."cost" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "invoice_number" "text",
    "counterparty" "text",
    "description" "text",
    "invoice_date" "date" NOT NULL,
    "net_value" double precision NOT NULL,
    "gross_value" double precision,
    "contractor_id" bigint,
    "currency" "public"."currency" NOT NULL,
    "workspace_id" bigint NOT NULL
);


ALTER TABLE "public"."cost" OWNER TO "postgres";


COMMENT ON TABLE "public"."cost" IS 'extra costs, or linked to contractor reports';



CREATE OR REPLACE VIEW "public"."cost_with_details" AS
SELECT
    NULL::bigint AS "id",
    NULL::timestamp with time zone AS "created_at",
    NULL::"text" AS "invoice_number",
    NULL::"text" AS "counterparty",
    NULL::"text" AS "description",
    NULL::"date" AS "invoice_date",
    NULL::double precision AS "net_value",
    NULL::double precision AS "gross_value",
    NULL::bigint AS "contractor_id",
    NULL::"public"."currency" AS "currency",
    NULL::bigint AS "workspace_id",
    NULL::"jsonb" AS "linked_reports",
    NULL::bigint[] AS "client_ids",
    NULL::"json" AS "contractor",
    NULL::bigint[] AS "potential_clients",
    NULL::numeric AS "linked_reports_amount",
    NULL::numeric AS "linked_reports_remainder";


ALTER TABLE "public"."cost_with_details" OWNER TO "postgres";


ALTER TABLE "public"."cost" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."costs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."link_billing_report" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "billing_id" bigint,
    "report_id" bigint,
    "report_amount" double precision,
    "description" "text",
    "billing_amount" double precision
);


ALTER TABLE "public"."link_billing_report" OWNER TO "postgres";


COMMENT ON TABLE "public"."link_billing_report" IS 'link between client billing and contractor report - explains why we charged specific client with given invoice';



COMMENT ON COLUMN "public"."link_billing_report"."report_amount" IS 'how much from the report the billing is covering';



ALTER TABLE "public"."link_billing_report" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."link_billing_report_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."link_contractor_project" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."link_contractor_project_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."link_cost_report" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "report_amount" double precision NOT NULL,
    "cost_id" bigint,
    "report_id" bigint,
    "cost_amount" double precision NOT NULL,
    "description" "text"
);


ALTER TABLE "public"."link_cost_report" OWNER TO "postgres";


COMMENT ON COLUMN "public"."link_cost_report"."report_amount" IS 'wartość pokrywająca raport. wartość kosztu i wartość raportu mogą się różnić, np wyrażane w różnych walutach + opłaty konwersji waluty, czyli np raport w eur, fakrura w pln. report_amount=1000 (eur) a cost_amount=4200 (pln) bo kurs eur 4.21 + 10 pln prowizji';



COMMENT ON COLUMN "public"."link_cost_report"."cost_amount" IS 'wartość pokrywająca fakturę';



COMMENT ON COLUMN "public"."link_cost_report"."description" IS 'wyjaśnienie różnic między report_amount oraz cost_amont';



ALTER TABLE "public"."link_cost_report" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."link_cost_report_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."link_report_project" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "report_id" bigint,
    "project_id" bigint,
    "report_commited_amout" double precision,
    "project_commited_amount" double precision,
    "calculation_schema" "jsonb",
    "description" "text"
);


ALTER TABLE "public"."link_report_project" OWNER TO "postgres";


COMMENT ON TABLE "public"."link_report_project" IS 'połączenie danego raportu z danym projektem. może być częściowy, np połowa kwoty tego raportu (wyliczana wg schemy) idzie na parp, a połowa idzie na "po parpie"';



ALTER TABLE "public"."link_report_project" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."link_report_project_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."link_workspace_client" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "workspace_id" bigint NOT NULL,
    "client_id" bigint NOT NULL
);


ALTER TABLE "public"."link_workspace_client" OWNER TO "postgres";


ALTER TABLE "public"."link_workspace_client" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."link_workspace_client_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."link_workspace_user" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "workspace_id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL
);


ALTER TABLE "public"."link_workspace_user" OWNER TO "postgres";


ALTER TABLE "public"."link_workspace_user" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."link_workspace_user_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."project" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "client_id" bigint NOT NULL,
    "workspace_id" bigint NOT NULL,
    "description" "text",
    "name" "text" NOT NULL,
    "status" "public"."project_status" DEFAULT 'draft'::"public"."project_status" NOT NULL
);


ALTER TABLE "public"."project" OWNER TO "postgres";


ALTER TABLE "public"."project" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."project2_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."project_iteration" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "period_start" "date",
    "period_end" "date",
    "status" "public"."project_status",
    "description" "text",
    "project_id" bigint,
    "ordinal_number" bigint NOT NULL,
    "currency" "public"."currency" NOT NULL,
    "events" "jsonb"[]
);


ALTER TABLE "public"."project_iteration" OWNER TO "postgres";


COMMENT ON COLUMN "public"."project_iteration"."currency" IS 'waluta to rozliczeń iteracji';



ALTER TABLE "public"."project_iteration" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."project_iteration_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."project_iteration_position" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "project_iteration_id" bigint NOT NULL,
    "quantity" double precision NOT NULL,
    "order" bigint,
    "unit" "text" NOT NULL,
    "unit_price" double precision NOT NULL,
    "description" "text" NOT NULL,
    CONSTRAINT "project_iteration_position_unit_price_check" CHECK (("unit_price" >= (0)::double precision))
);


ALTER TABLE "public"."project_iteration_position" OWNER TO "postgres";


ALTER TABLE "public"."project_iteration_position" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."project_iteration_position_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE OR REPLACE VIEW "public"."report_with_details" AS
SELECT
    NULL::bigint AS "id",
    NULL::timestamp with time zone AS "created_at",
    NULL::bigint AS "contractor_id",
    NULL::"text" AS "description",
    NULL::double precision AS "net_value",
    NULL::"date" AS "period_start",
    NULL::"date" AS "period_end",
    NULL::"public"."currency" AS "currency",
    NULL::bigint AS "client_id",
    NULL::bigint AS "workspace_id",
    NULL::bigint AS "project_iteration_id",
    NULL::"jsonb" AS "link_billing_reports",
    NULL::"jsonb" AS "link_cost_reports",
    NULL::numeric AS "total_billing_billing_value",
    NULL::numeric AS "total_cost_cost_value",
    NULL::numeric AS "report_billing_balance",
    NULL::numeric AS "report_cost_balance",
    NULL::numeric AS "billing_cost_balance",
    NULL::numeric AS "immediate_payment_due",
    NULL::"json" AS "previous_report";


ALTER TABLE "public"."report_with_details" OWNER TO "postgres";


COMMENT ON COLUMN "public"."report_with_details"."link_billing_reports" IS 'Lista powiązanych billingów';



COMMENT ON COLUMN "public"."report_with_details"."link_cost_reports" IS 'Lista powiązanych kosztów';



COMMENT ON COLUMN "public"."report_with_details"."total_billing_billing_value" IS 'Aktualne łączne obciążenie klienta wynikające z raportu (wartości billingów przypisanych do raportu).';



COMMENT ON COLUMN "public"."report_with_details"."total_cost_cost_value" IS 'Aktualne łączne obciążenie kosztów związanych z raportem (wartości kosztów przypisanych do raportu).';



COMMENT ON COLUMN "public"."report_with_details"."report_billing_balance" IS 'Saldo billingowe. Wartość dodatnia - należy jeszcze wystawić billing klientowi za tę kwotę. Wartość ujemna - klient zapłacił więcej, niż obecnie wynosi wartość raportu.';



COMMENT ON COLUMN "public"."report_with_details"."report_cost_balance" IS 'Saldo kosztowe. Wartość dodatnia - kontraktor powinien jeszcze otrzymać tę kwotę w przyszłości (kiedy firma na to zarobi). Wartość ujemna - koszt został nadpłacony lub nie jest przypisany do wartości raportu.';



COMMENT ON COLUMN "public"."report_with_details"."billing_cost_balance" IS 'Saldo bezpośredniego zarobku - różnica między pieniędzmi otrzymanymi od klienta z tytułu raportu a kosztami raportu. Wartość dodatnia - kontraktor ma wystawić fakturę na tę kwotę, ponieważ te pieniądze zostały wypracowane. Wartość ujemna - firma jest winna kontraktorowi tę kwotę, ale albo sama nie wystawiła jeszcze faktury za usługi klientowi, albo nie ma jeszcze kasy na zapłacenie. Ze standardowego punktu widzenia, jest to też chwilowy zarobek firmy';



CREATE TABLE IF NOT EXISTS "public"."variable" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "type" "public"."variable_type" NOT NULL,
    "value" "text" NOT NULL,
    "workspace_id" bigint,
    "client_id" bigint,
    "contractor_id" bigint,
    "defined_by" "uuid",
    "updated_by" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."variable" OWNER TO "postgres";


CREATE OR REPLACE VIEW "public"."resolved_variables" WITH ("security_invoker"='true') AS
 SELECT "ranked_variables"."name",
    "ranked_variables"."type",
    "ranked_variables"."value",
    "ranked_variables"."workspace_id",
    "ranked_variables"."client_id",
    "ranked_variables"."contractor_id",
    "ranked_variables"."defined_by",
    "ranked_variables"."updated_by",
    "ranked_variables"."created_at",
    "ranked_variables"."updated_at"
   FROM ( SELECT "v"."id",
            "v"."name",
            "v"."type",
            "v"."value",
            "v"."workspace_id",
            "v"."client_id",
            "v"."contractor_id",
            "v"."defined_by",
            "v"."updated_by",
            "v"."created_at",
            "v"."updated_at",
            "row_number"() OVER (PARTITION BY "v"."name" ORDER BY ((("v"."workspace_id" IS NOT NULL))::integer) DESC, ((("v"."client_id" IS NOT NULL))::integer) DESC, ((("v"."contractor_id" IS NOT NULL))::integer) DESC, "v"."created_at") AS "rank"
           FROM "public"."variable" "v") "ranked_variables"
  WHERE ("ranked_variables"."rank" = 1);


ALTER TABLE "public"."resolved_variables" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."role" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "project_id" bigint,
    "name" "text" NOT NULL,
    "description" "text",
    "billing_schema" "jsonb"
);


ALTER TABLE "public"."role" OWNER TO "postgres";


COMMENT ON TABLE "public"."role" IS 'project role. billing schema to jest de factor rate (flat rate, mnożnik, etc)';



ALTER TABLE "public"."role" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."role_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."variable" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."variables_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."workspace" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "slug" "text" NOT NULL,
    "name" "text" NOT NULL,
    "avatar_url" "text"
);


ALTER TABLE "public"."workspace" OWNER TO "postgres";


ALTER TABLE "public"."workspace" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."workspaces_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."billing"
    ADD CONSTRAINT "client_billing_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."client"
    ADD CONSTRAINT "client_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."report"
    ADD CONSTRAINT "contractor_earnings_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."contractor"
    ADD CONSTRAINT "contractors_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."cost"
    ADD CONSTRAINT "costs_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."link_billing_report"
    ADD CONSTRAINT "link_billing_report_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."link_contractor_project"
    ADD CONSTRAINT "link_contractor_project_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."link_cost_report"
    ADD CONSTRAINT "link_cost_report_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."link_report_project"
    ADD CONSTRAINT "link_report_project_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."link_workspace_client"
    ADD CONSTRAINT "link_workspace_client_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."link_workspace_user"
    ADD CONSTRAINT "link_workspace_user_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."project"
    ADD CONSTRAINT "project2_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."project_iteration"
    ADD CONSTRAINT "project_iteration_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."project_iteration_position"
    ADD CONSTRAINT "project_iteration_position_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."role"
    ADD CONSTRAINT "role_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."variable"
    ADD CONSTRAINT "variables_name_workspace_id_client_id_contractor_id_key" UNIQUE ("name", "workspace_id", "client_id", "contractor_id");



ALTER TABLE ONLY "public"."variable"
    ADD CONSTRAINT "variables_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."workspace"
    ADD CONSTRAINT "workspaces_pkey" PRIMARY KEY ("id");



CREATE OR REPLACE VIEW "public"."billing_with_details" WITH ("security_invoker"='true') AS
 SELECT "billing"."id",
    "billing"."created_at",
    "billing"."currency",
    "billing"."total_net",
    "billing"."total_gross",
    "billing"."client_id",
    "billing"."invoice_number",
    "billing"."invoice_date",
    "billing"."description",
    "billing"."workspace_id",
    COALESCE("jsonb_agg"(DISTINCT "jsonb_build_object"('link', "row_to_json"("link_billing_report".*), 'report', "row_to_json"("report".*))) FILTER (WHERE ("link_billing_report"."id" IS NOT NULL)), '[]'::"jsonb") AS "link_billing_reports",
    COALESCE("jsonb_agg"(DISTINCT "jsonb_build_object"('contractor', "row_to_json"("contractor".*))) FILTER (WHERE ("contractor"."id" IS NOT NULL)), '[]'::"jsonb") AS "contractors",
    COALESCE("array_agg"(DISTINCT "contractor"."id") FILTER (WHERE ("contractor"."id" IS NOT NULL)), ARRAY[]::bigint[]) AS "linked_contractor_ids",
    "row_to_json"("client".*) AS "client",
    "round"(COALESCE(("sum"("link_billing_report"."report_amount") FILTER (WHERE ("link_billing_report"."billing_id" = "billing"."id")))::numeric, (0)::numeric), 2) AS "total_report_value",
    "round"(COALESCE(("sum"("link_billing_report"."billing_amount") FILTER (WHERE ("link_billing_report"."billing_id" = "billing"."id")))::numeric, (0)::numeric), 2) AS "total_billing_value",
    "round"((COALESCE(("sum"("link_billing_report"."billing_amount") FILTER (WHERE ("link_billing_report"."billing_id" = "billing"."id")))::numeric, (0)::numeric) - COALESCE(("sum"("link_billing_report"."report_amount") FILTER (WHERE ("link_billing_report"."billing_id" = "billing"."id")))::numeric, (0)::numeric)), 2) AS "billing_balance",
    "round"((("billing"."total_net")::numeric - COALESCE(("sum"("link_billing_report"."billing_amount") FILTER (WHERE ("link_billing_report"."billing_id" = "billing"."id")))::numeric, (0)::numeric)), 2) AS "remaining_balance"
   FROM (((("public"."billing"
     LEFT JOIN "public"."link_billing_report" ON (("billing"."id" = "link_billing_report"."billing_id")))
     LEFT JOIN "public"."report" ON (("link_billing_report"."report_id" = "report"."id")))
     LEFT JOIN "public"."contractor" ON (("report"."contractor_id" = "contractor"."id")))
     LEFT JOIN "public"."client" ON (("billing"."client_id" = "client"."id")))
  GROUP BY "billing"."id", "client"."id";



CREATE OR REPLACE VIEW "public"."report_with_details" WITH ("security_invoker"='true') AS
 SELECT "report"."id",
    "report"."created_at",
    "report"."contractor_id",
    "report"."description",
    "report"."net_value",
    "report"."period_start",
    "report"."period_end",
    "report"."currency",
    "report"."client_id",
    "report"."workspace_id",
    "report"."project_iteration_id",
    COALESCE("jsonb_agg"(DISTINCT "jsonb_build_object"('link', "row_to_json"("link_billing_report".*), 'billing', "row_to_json"("billing".*))) FILTER (WHERE ("link_billing_report"."id" IS NOT NULL)), '[]'::"jsonb") AS "link_billing_reports",
    COALESCE("jsonb_agg"(DISTINCT "jsonb_build_object"('link', "row_to_json"("link_cost_report".*), 'cost', "row_to_json"("cost".*))) FILTER (WHERE ("link_cost_report"."id" IS NOT NULL)), '[]'::"jsonb") AS "link_cost_reports",
    "round"(COALESCE(("sum"(DISTINCT "link_billing_report"."billing_amount") FILTER (WHERE ("link_billing_report"."report_id" = "report"."id")))::numeric, (0)::numeric), 2) AS "total_billing_billing_value",
    "round"(COALESCE(("sum"(DISTINCT "link_cost_report"."report_amount") FILTER (WHERE ("link_cost_report"."report_id" = "report"."id")))::numeric, (0)::numeric), 2) AS "total_cost_cost_value",
    "round"((("report"."net_value")::numeric - COALESCE(("sum"(DISTINCT "link_billing_report"."report_amount") FILTER (WHERE ("link_billing_report"."report_id" = "report"."id")))::numeric, (0)::numeric)), 2) AS "report_billing_balance",
    "round"((("report"."net_value")::numeric - COALESCE(("sum"(DISTINCT "link_cost_report"."report_amount") FILTER (WHERE ("link_cost_report"."report_id" = "report"."id")))::numeric, (0)::numeric)), 2) AS "report_cost_balance",
    "round"((COALESCE(("sum"(DISTINCT "link_billing_report"."report_amount") FILTER (WHERE ("link_billing_report"."report_id" = "report"."id")))::numeric, (0)::numeric) - COALESCE(("sum"(DISTINCT "link_cost_report"."report_amount") FILTER (WHERE ("link_cost_report"."report_id" = "report"."id")))::numeric, (0)::numeric)), 2) AS "billing_cost_balance",
    "round"((LEAST(COALESCE(("sum"(DISTINCT "link_billing_report"."report_amount") FILTER (WHERE (("link_billing_report"."report_id" = "report"."id") AND ("link_billing_report"."billing_id" IS NOT NULL))))::numeric, (0)::numeric), ("report"."net_value")::numeric) - COALESCE(("sum"(DISTINCT "link_cost_report"."report_amount") FILTER (WHERE ("link_cost_report"."report_id" = "report"."id")))::numeric, (0)::numeric)), 2) AS "immediate_payment_due",
    ( SELECT "row_to_json"("previous_report".*) AS "row_to_json"
           FROM "public"."report" "previous_report"
          WHERE (("previous_report"."contractor_id" = "report"."contractor_id") AND ("previous_report"."client_id" = "report"."client_id") AND ("previous_report"."workspace_id" = "report"."workspace_id") AND ("previous_report"."period_end" <= "report"."period_end") AND ("previous_report"."id" <> "report"."id"))
          ORDER BY "previous_report"."period_end" DESC
         LIMIT 1) AS "previous_report"
   FROM (((("public"."report"
     LEFT JOIN "public"."link_billing_report" ON (("report"."id" = "link_billing_report"."report_id")))
     LEFT JOIN "public"."billing" ON (("link_billing_report"."billing_id" = "billing"."id")))
     LEFT JOIN "public"."link_cost_report" ON (("report"."id" = "link_cost_report"."report_id")))
     LEFT JOIN "public"."cost" ON (("link_cost_report"."cost_id" = "cost"."id")))
  GROUP BY "report"."id";



CREATE OR REPLACE VIEW "public"."cost_with_details" WITH ("security_invoker"='true') AS
 SELECT "cost"."id",
    "cost"."created_at",
    "cost"."invoice_number",
    "cost"."counterparty",
    "cost"."description",
    "cost"."invoice_date",
    "cost"."net_value",
    "cost"."gross_value",
    "cost"."contractor_id",
    "cost"."currency",
    "cost"."workspace_id",
    COALESCE("jsonb_agg"("jsonb_build_object"('link', "row_to_json"("link_cost_report".*), 'report', "row_to_json"("report".*))) FILTER (WHERE ("link_cost_report"."id" IS NOT NULL)), '[]'::"jsonb") AS "linked_reports",
    COALESCE(NULLIF(ARRAY( SELECT DISTINCT "report_1"."client_id"
           FROM ("public"."report" "report_1"
             JOIN "public"."link_cost_report" "link_cost_report_1" ON (("report_1"."id" = "link_cost_report_1"."report_id")))
          WHERE ("link_cost_report_1"."cost_id" = "cost"."id")), '{}'::bigint[]), (ARRAY['-1'::integer])::bigint[]) AS "client_ids",
        CASE
            WHEN ("cost"."contractor_id" IS NOT NULL) THEN "row_to_json"("contractor".*)
            ELSE NULL::"json"
        END AS "contractor",
    COALESCE(NULLIF(ARRAY( SELECT DISTINCT "client"."id"
           FROM (("public"."client"
             JOIN "public"."report" "report_1" ON (("client"."id" = "report_1"."client_id")))
             JOIN "public"."cost" "linked_cost" ON (("report_1"."contractor_id" = "linked_cost"."contractor_id")))
          WHERE (("linked_cost"."id" = "cost"."id") AND ("linked_cost"."workspace_id" = "cost"."workspace_id") AND ("report_1"."workspace_id" = "cost"."workspace_id"))), '{}'::bigint[]), (ARRAY['-1'::integer])::bigint[]) AS "potential_clients",
    "round"(COALESCE(( SELECT ("sum"("link_cost_report_1"."cost_amount"))::numeric AS "sum"
           FROM "public"."link_cost_report" "link_cost_report_1"
          WHERE ("link_cost_report_1"."cost_id" = "cost"."id")), (0)::numeric), 2) AS "linked_reports_amount",
    "round"((("cost"."net_value")::numeric - COALESCE(( SELECT ("sum"("link_cost_report_1"."cost_amount"))::numeric AS "sum"
           FROM "public"."link_cost_report" "link_cost_report_1"
          WHERE ("link_cost_report_1"."cost_id" = "cost"."id")), (0)::numeric)), 2) AS "linked_reports_remainder"
   FROM ((("public"."cost"
     LEFT JOIN "public"."link_cost_report" ON (("cost"."id" = "link_cost_report"."cost_id")))
     LEFT JOIN "public"."report" ON (("report"."id" = "link_cost_report"."report_id")))
     LEFT JOIN "public"."contractor" ON (("contractor"."id" = "cost"."contractor_id")))
  GROUP BY "cost"."id", "contractor"."id";



CREATE OR REPLACE TRIGGER "trg_set_defined_updated_by" BEFORE INSERT OR UPDATE ON "public"."variable" FOR EACH ROW EXECUTE FUNCTION "public"."set_defined_updated_by"();



ALTER TABLE ONLY "public"."billing"
    ADD CONSTRAINT "client_billing_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."client"("id");



ALTER TABLE ONLY "public"."billing"
    ADD CONSTRAINT "client_billing_workspace_id_fkey" FOREIGN KEY ("workspace_id") REFERENCES "public"."workspace"("id");



ALTER TABLE ONLY "public"."report"
    ADD CONSTRAINT "contractor_earnings_contractor_id_fkey" FOREIGN KEY ("contractor_id") REFERENCES "public"."contractor"("id");



ALTER TABLE ONLY "public"."report"
    ADD CONSTRAINT "contractor_reports_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."client"("id");



ALTER TABLE ONLY "public"."report"
    ADD CONSTRAINT "contractor_reports_workspace_id_fkey" FOREIGN KEY ("workspace_id") REFERENCES "public"."workspace"("id");



ALTER TABLE ONLY "public"."contractor"
    ADD CONSTRAINT "contractors_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."cost"
    ADD CONSTRAINT "costs_contractor_id_fkey" FOREIGN KEY ("contractor_id") REFERENCES "public"."contractor"("id");



ALTER TABLE ONLY "public"."cost"
    ADD CONSTRAINT "costs_workspace_id_fkey" FOREIGN KEY ("workspace_id") REFERENCES "public"."workspace"("id");



ALTER TABLE ONLY "public"."link_billing_report"
    ADD CONSTRAINT "link_billing_report_billing_id_fkey" FOREIGN KEY ("billing_id") REFERENCES "public"."billing"("id");



ALTER TABLE ONLY "public"."link_billing_report"
    ADD CONSTRAINT "link_billing_report_report_id_fkey" FOREIGN KEY ("report_id") REFERENCES "public"."report"("id");



ALTER TABLE ONLY "public"."link_contractor_project"
    ADD CONSTRAINT "link_contractor_project_contractor_id_fkey" FOREIGN KEY ("contractor_id") REFERENCES "public"."contractor"("id");



ALTER TABLE ONLY "public"."link_contractor_project"
    ADD CONSTRAINT "link_contractor_project_default_role_id_fkey" FOREIGN KEY ("default_role_id") REFERENCES "public"."role"("id");



ALTER TABLE ONLY "public"."link_contractor_project"
    ADD CONSTRAINT "link_contractor_project_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."project"("id");



ALTER TABLE ONLY "public"."link_cost_report"
    ADD CONSTRAINT "link_cost_report_cost_id_fkey" FOREIGN KEY ("cost_id") REFERENCES "public"."cost"("id");



ALTER TABLE ONLY "public"."link_cost_report"
    ADD CONSTRAINT "link_cost_report_report_id_fkey" FOREIGN KEY ("report_id") REFERENCES "public"."report"("id");



ALTER TABLE ONLY "public"."link_report_project"
    ADD CONSTRAINT "link_report_project_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."project"("id");



ALTER TABLE ONLY "public"."link_report_project"
    ADD CONSTRAINT "link_report_project_report_id_fkey" FOREIGN KEY ("report_id") REFERENCES "public"."report"("id");



ALTER TABLE ONLY "public"."link_workspace_client"
    ADD CONSTRAINT "link_workspace_client_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."client"("id");



ALTER TABLE ONLY "public"."link_workspace_client"
    ADD CONSTRAINT "link_workspace_client_workspace_id_fkey" FOREIGN KEY ("workspace_id") REFERENCES "public"."workspace"("id");



ALTER TABLE ONLY "public"."link_workspace_user"
    ADD CONSTRAINT "link_workspace_user_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."link_workspace_user"
    ADD CONSTRAINT "link_workspace_user_workspace_id_fkey" FOREIGN KEY ("workspace_id") REFERENCES "public"."workspace"("id");



ALTER TABLE ONLY "public"."project"
    ADD CONSTRAINT "project2_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."client"("id");



ALTER TABLE ONLY "public"."project"
    ADD CONSTRAINT "project2_workspace_id_fkey" FOREIGN KEY ("workspace_id") REFERENCES "public"."workspace"("id");



ALTER TABLE ONLY "public"."project_iteration_position"
    ADD CONSTRAINT "project_iteration_position_project_iteration_id_fkey" FOREIGN KEY ("project_iteration_id") REFERENCES "public"."project_iteration"("id");



ALTER TABLE ONLY "public"."project_iteration"
    ADD CONSTRAINT "project_iteration_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."project"("id");



ALTER TABLE ONLY "public"."report"
    ADD CONSTRAINT "report_project_iteration_id_fkey" FOREIGN KEY ("project_iteration_id") REFERENCES "public"."project_iteration"("id");



ALTER TABLE ONLY "public"."role"
    ADD CONSTRAINT "role_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."project"("id");



ALTER TABLE ONLY "public"."variable"
    ADD CONSTRAINT "variables_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."client"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."variable"
    ADD CONSTRAINT "variables_contractor_id_fkey" FOREIGN KEY ("contractor_id") REFERENCES "public"."contractor"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."variable"
    ADD CONSTRAINT "variables_defined_by_fkey" FOREIGN KEY ("defined_by") REFERENCES "auth"."users"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."variable"
    ADD CONSTRAINT "variables_updated_by_fkey" FOREIGN KEY ("updated_by") REFERENCES "auth"."users"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."variable"
    ADD CONSTRAINT "variables_workspace_id_fkey" FOREIGN KEY ("workspace_id") REFERENCES "public"."workspace"("id") ON DELETE CASCADE;



CREATE POLICY "access within workspace" ON "public"."billing" USING ((EXISTS ( SELECT 1
   FROM ("public"."link_workspace_client" "lwc"
     JOIN "public"."link_workspace_user" "lwu" ON (("lwc"."workspace_id" = "lwu"."workspace_id")))
  WHERE (("billing"."client_id" = "lwc"."client_id") AND ("billing"."workspace_id" = "lwc"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"()))))) WITH CHECK (true);



CREATE POLICY "all in workspace" ON "public"."project" USING ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("lwu"."workspace_id" = "project"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"()))))) WITH CHECK (true);



CREATE POLICY "all same workspace" ON "public"."project_iteration" USING ((EXISTS ( SELECT 1
   FROM ("public"."project" "p"
     JOIN "public"."link_workspace_user" "lwu" ON (("p"."workspace_id" = "lwu"."workspace_id")))
  WHERE (("project_iteration"."project_id" = "p"."id") AND ("lwu"."user_id" = "auth"."uid"())))));



CREATE POLICY "allow delete anything from your workspace" ON "public"."link_cost_report" FOR DELETE USING (((("cost_id" IS NULL) OR (EXISTS ( SELECT 1
   FROM ("public"."cost"
     JOIN "public"."link_workspace_user" ON (("cost"."workspace_id" = "link_workspace_user"."workspace_id")))
  WHERE (("cost"."id" = "link_cost_report"."cost_id") AND ("link_workspace_user"."user_id" = "auth"."uid"()))))) AND (("report_id" IS NULL) OR (EXISTS ( SELECT 1
   FROM ("public"."report"
     JOIN "public"."link_workspace_user" ON (("report"."workspace_id" = "link_workspace_user"."workspace_id")))
  WHERE (("report"."id" = "link_cost_report"."report_id") AND ("link_workspace_user"."user_id" = "auth"."uid"())))))));



CREATE POLICY "allow delete from your workspace" ON "public"."report" FOR DELETE USING ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("report"."workspace_id" = "lwu"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"())))));



CREATE POLICY "allow inserting report" ON "public"."report" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("report"."workspace_id" = "lwu"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"())))));



CREATE POLICY "allow inserting same workspace" ON "public"."cost" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("lwu"."workspace_id" = "cost"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"())))));



CREATE POLICY "allow linking if you access things from workspace" ON "public"."link_cost_report" FOR INSERT WITH CHECK (((("cost_id" IS NULL) OR (EXISTS ( SELECT 1
   FROM ("public"."cost"
     JOIN "public"."link_workspace_user" ON (("cost"."workspace_id" = "link_workspace_user"."workspace_id")))
  WHERE (("cost"."id" = "link_cost_report"."cost_id") AND ("link_workspace_user"."user_id" = "auth"."uid"()))))) AND (("report_id" IS NULL) OR (EXISTS ( SELECT 1
   FROM ("public"."report"
     JOIN "public"."link_workspace_user" ON (("report"."workspace_id" = "link_workspace_user"."workspace_id")))
  WHERE (("report"."id" = "link_cost_report"."report_id") AND ("link_workspace_user"."user_id" = "auth"."uid"())))))));



CREATE POLICY "anyone within workspace can edit" ON "public"."cost" FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("lwu"."workspace_id" = "cost"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"()))))) WITH CHECK (true);



ALTER TABLE "public"."billing" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."client" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."contractor" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."cost" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "delete billing links" ON "public"."link_billing_report" FOR DELETE USING (((("report_id" IS NOT NULL) AND (EXISTS ( SELECT 1
   FROM ("public"."report" "cr"
     JOIN "public"."link_workspace_user" "lwu" ON (("cr"."workspace_id" = "lwu"."workspace_id")))
  WHERE (("cr"."id" = "link_billing_report"."report_id") AND ("lwu"."user_id" = "auth"."uid"()))))) OR (("billing_id" IS NOT NULL) AND (EXISTS ( SELECT 1
   FROM ((("public"."billing" "cb"
     JOIN "public"."client" "c" ON (("cb"."client_id" = "c"."id")))
     JOIN "public"."link_workspace_client" "lwc" ON (("c"."id" = "lwc"."client_id")))
     JOIN "public"."link_workspace_user" "lwu" ON (("lwc"."workspace_id" = "lwu"."workspace_id")))
  WHERE (("cb"."id" = "link_billing_report"."billing_id") AND ("lwu"."user_id" = "auth"."uid"())))))));



CREATE POLICY "delete from your workspace" ON "public"."cost" FOR DELETE USING ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("lwu"."workspace_id" = "cost"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"())))));



CREATE POLICY "for all visible projects" ON "public"."link_contractor_project" USING ((EXISTS ( SELECT 1
   FROM "public"."project"
  WHERE ("project"."id" = "link_contractor_project"."project_id")))) WITH CHECK (true);



ALTER TABLE "public"."link_billing_report" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."link_contractor_project" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."link_cost_report" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."link_report_project" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."link_workspace_client" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."link_workspace_user" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "linking" ON "public"."link_billing_report" FOR INSERT WITH CHECK (true);



ALTER TABLE "public"."project" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."project_iteration" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."project_iteration_position" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "read" ON "public"."workspace" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("lwu"."workspace_id" = "workspace"."id") AND ("lwu"."user_id" = "auth"."uid"())))));



CREATE POLICY "read clients" ON "public"."client" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM ("public"."link_workspace_client" "lwc"
     JOIN "public"."link_workspace_user" "lwu" ON (("lwc"."workspace_id" = "lwu"."workspace_id")))
  WHERE (("lwc"."client_id" = "client"."id") AND ("lwu"."user_id" = "auth"."uid"())))));



CREATE POLICY "read contractor reports" ON "public"."report" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("report"."workspace_id" = "lwu"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"())))));



CREATE POLICY "read contractors" ON "public"."contractor" FOR SELECT USING (true);



CREATE POLICY "read costs" ON "public"."cost" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("lwu"."workspace_id" = "cost"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"())))));



CREATE POLICY "read link workspace client" ON "public"."link_workspace_client" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("lwu"."workspace_id" = "link_workspace_client"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"())))));



CREATE POLICY "read link_billing_report" ON "public"."link_billing_report" FOR SELECT USING (true);



CREATE POLICY "read link_cost_report" ON "public"."link_cost_report" FOR SELECT USING (true);



CREATE POLICY "read links workspace user" ON "public"."link_workspace_user" FOR SELECT USING (("user_id" = "auth"."uid"()));



ALTER TABLE "public"."report" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."role" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "update anything from your workspace" ON "public"."report" FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM "public"."link_workspace_user" "lwu"
  WHERE (("report"."workspace_id" = "lwu"."workspace_id") AND ("lwu"."user_id" = "auth"."uid"()))))) WITH CHECK (true);



CREATE POLICY "update from within workspace" ON "public"."link_billing_report" FOR UPDATE USING (((("report_id" IS NOT NULL) AND (EXISTS ( SELECT 1
   FROM ("public"."report" "cr"
     JOIN "public"."link_workspace_user" "lwu" ON (("cr"."workspace_id" = "lwu"."workspace_id")))
  WHERE (("cr"."id" = "link_billing_report"."report_id") AND ("lwu"."user_id" = "auth"."uid"()))))) OR (("billing_id" IS NOT NULL) AND (EXISTS ( SELECT 1
   FROM ((("public"."billing" "cb"
     JOIN "public"."client" "c" ON (("cb"."client_id" = "c"."id")))
     JOIN "public"."link_workspace_client" "lwc" ON (("c"."id" = "lwc"."client_id")))
     JOIN "public"."link_workspace_user" "lwu" ON (("lwc"."workspace_id" = "lwu"."workspace_id")))
  WHERE (("cb"."id" = "link_billing_report"."billing_id") AND ("lwu"."user_id" = "auth"."uid"()))))))) WITH CHECK (true);



CREATE POLICY "update withing worksapce" ON "public"."link_cost_report" FOR UPDATE USING (((("cost_id" IS NULL) OR (EXISTS ( SELECT 1
   FROM ("public"."cost"
     JOIN "public"."link_workspace_user" ON (("cost"."workspace_id" = "link_workspace_user"."workspace_id")))
  WHERE (("cost"."id" = "link_cost_report"."cost_id") AND ("link_workspace_user"."user_id" = "auth"."uid"()))))) AND (("report_id" IS NULL) OR (EXISTS ( SELECT 1
   FROM ("public"."report"
     JOIN "public"."link_workspace_user" ON (("report"."workspace_id" = "link_workspace_user"."workspace_id")))
  WHERE (("report"."id" = "link_cost_report"."report_id") AND ("link_workspace_user"."user_id" = "auth"."uid"()))))))) WITH CHECK (true);



ALTER TABLE "public"."variable" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "within workspace" ON "public"."project_iteration_position" USING ((EXISTS ( SELECT 1
   FROM "public"."project_iteration"
  WHERE ("project_iteration"."id" = "project_iteration_position"."project_iteration_id")))) WITH CHECK (true);



CREATE POLICY "workpsace access" ON "public"."variable" USING (((("workspace_id" IS NULL) OR ("workspace_id" = ANY ("public"."get_visible_workspaces"()))) AND (("client_id" IS NULL) OR ("client_id" = ANY ("public"."get_visible_clients"())))));



ALTER TABLE "public"."workspace" ENABLE ROW LEVEL SECURITY;


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



GRANT ALL ON FUNCTION "public"."custom_query"("query" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."custom_query"("query" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."custom_query"("query" "text") TO "service_role";



GRANT ALL ON FUNCTION "public"."get_visible_clients"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_visible_clients"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_visible_clients"() TO "service_role";



GRANT ALL ON FUNCTION "public"."get_visible_workspaces"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_visible_workspaces"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_visible_workspaces"() TO "service_role";



GRANT ALL ON FUNCTION "public"."set_defined_updated_by"() TO "anon";
GRANT ALL ON FUNCTION "public"."set_defined_updated_by"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."set_defined_updated_by"() TO "service_role";



GRANT ALL ON TABLE "public"."billing" TO "anon";
GRANT ALL ON TABLE "public"."billing" TO "authenticated";
GRANT ALL ON TABLE "public"."billing" TO "service_role";



GRANT ALL ON TABLE "public"."billing_with_details" TO "anon";
GRANT ALL ON TABLE "public"."billing_with_details" TO "authenticated";
GRANT ALL ON TABLE "public"."billing_with_details" TO "service_role";



GRANT ALL ON TABLE "public"."client" TO "anon";
GRANT ALL ON TABLE "public"."client" TO "authenticated";
GRANT ALL ON TABLE "public"."client" TO "service_role";



GRANT ALL ON SEQUENCE "public"."client_billing_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."client_billing_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."client_billing_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."client_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."client_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."client_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."contractor" TO "anon";
GRANT ALL ON TABLE "public"."contractor" TO "authenticated";
GRANT ALL ON TABLE "public"."contractor" TO "service_role";



GRANT ALL ON TABLE "public"."report" TO "anon";
GRANT ALL ON TABLE "public"."report" TO "authenticated";
GRANT ALL ON TABLE "public"."report" TO "service_role";



GRANT ALL ON SEQUENCE "public"."contractor_earnings_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."contractor_earnings_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."contractor_earnings_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."link_contractor_project" TO "anon";
GRANT ALL ON TABLE "public"."link_contractor_project" TO "authenticated";
GRANT ALL ON TABLE "public"."link_contractor_project" TO "service_role";



GRANT ALL ON TABLE "public"."contractor_with_projects" TO "anon";
GRANT ALL ON TABLE "public"."contractor_with_projects" TO "authenticated";
GRANT ALL ON TABLE "public"."contractor_with_projects" TO "service_role";



GRANT ALL ON SEQUENCE "public"."contractors_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."contractors_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."contractors_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."cost" TO "anon";
GRANT ALL ON TABLE "public"."cost" TO "authenticated";
GRANT ALL ON TABLE "public"."cost" TO "service_role";



GRANT ALL ON TABLE "public"."cost_with_details" TO "anon";
GRANT ALL ON TABLE "public"."cost_with_details" TO "authenticated";
GRANT ALL ON TABLE "public"."cost_with_details" TO "service_role";



GRANT ALL ON SEQUENCE "public"."costs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."costs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."costs_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."link_billing_report" TO "anon";
GRANT ALL ON TABLE "public"."link_billing_report" TO "authenticated";
GRANT ALL ON TABLE "public"."link_billing_report" TO "service_role";



GRANT ALL ON SEQUENCE "public"."link_billing_report_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."link_billing_report_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."link_billing_report_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."link_contractor_project_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."link_contractor_project_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."link_contractor_project_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."link_cost_report" TO "anon";
GRANT ALL ON TABLE "public"."link_cost_report" TO "authenticated";
GRANT ALL ON TABLE "public"."link_cost_report" TO "service_role";



GRANT ALL ON SEQUENCE "public"."link_cost_report_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."link_cost_report_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."link_cost_report_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."link_report_project" TO "anon";
GRANT ALL ON TABLE "public"."link_report_project" TO "authenticated";
GRANT ALL ON TABLE "public"."link_report_project" TO "service_role";



GRANT ALL ON SEQUENCE "public"."link_report_project_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."link_report_project_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."link_report_project_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."link_workspace_client" TO "anon";
GRANT ALL ON TABLE "public"."link_workspace_client" TO "authenticated";
GRANT ALL ON TABLE "public"."link_workspace_client" TO "service_role";



GRANT ALL ON SEQUENCE "public"."link_workspace_client_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."link_workspace_client_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."link_workspace_client_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."link_workspace_user" TO "anon";
GRANT ALL ON TABLE "public"."link_workspace_user" TO "authenticated";
GRANT ALL ON TABLE "public"."link_workspace_user" TO "service_role";



GRANT ALL ON SEQUENCE "public"."link_workspace_user_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."link_workspace_user_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."link_workspace_user_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."project" TO "anon";
GRANT ALL ON TABLE "public"."project" TO "authenticated";
GRANT ALL ON TABLE "public"."project" TO "service_role";



GRANT ALL ON SEQUENCE "public"."project2_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."project2_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."project2_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."project_iteration" TO "anon";
GRANT ALL ON TABLE "public"."project_iteration" TO "authenticated";
GRANT ALL ON TABLE "public"."project_iteration" TO "service_role";



GRANT ALL ON SEQUENCE "public"."project_iteration_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."project_iteration_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."project_iteration_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."project_iteration_position" TO "anon";
GRANT ALL ON TABLE "public"."project_iteration_position" TO "authenticated";
GRANT ALL ON TABLE "public"."project_iteration_position" TO "service_role";



GRANT ALL ON SEQUENCE "public"."project_iteration_position_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."project_iteration_position_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."project_iteration_position_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."report_with_details" TO "anon";
GRANT ALL ON TABLE "public"."report_with_details" TO "authenticated";
GRANT ALL ON TABLE "public"."report_with_details" TO "service_role";



GRANT ALL ON TABLE "public"."variable" TO "anon";
GRANT ALL ON TABLE "public"."variable" TO "authenticated";
GRANT ALL ON TABLE "public"."variable" TO "service_role";



GRANT ALL ON TABLE "public"."resolved_variables" TO "anon";
GRANT ALL ON TABLE "public"."resolved_variables" TO "authenticated";
GRANT ALL ON TABLE "public"."resolved_variables" TO "service_role";



GRANT ALL ON TABLE "public"."role" TO "anon";
GRANT ALL ON TABLE "public"."role" TO "authenticated";
GRANT ALL ON TABLE "public"."role" TO "service_role";



GRANT ALL ON SEQUENCE "public"."role_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."role_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."role_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."variables_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."variables_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."variables_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."workspace" TO "anon";
GRANT ALL ON TABLE "public"."workspace" TO "authenticated";
GRANT ALL ON TABLE "public"."workspace" TO "service_role";



GRANT ALL ON SEQUENCE "public"."workspaces_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."workspaces_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."workspaces_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






RESET ALL;
